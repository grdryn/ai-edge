apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gitops-update-pipeline
spec:
  params:
    - name: model-name
      type: string
    - name: gitServer
      type: string
    - name: gitApiServer
      type: string
    - name: gitOrgName
      type: string
    - name: gitRepoName
      type: string
    - name: gitRepoBranchBase
      default: main
      type: string
    - name: imageReferenceFilePath
      type: string
    - name: gitApiPrefix
      default: ''
      type: string
    - name: gitTokenSecretName
      type: string
    - name: gitTokenSecretKey
      default: token
      type: string
    - name: yq-script
      description: |
        The yq script (can be multiple lines/commands) to execute inside the git repository.
        `$IMAGE_NAME` and `$IMAGE_DIGEST` will be set as environment variables, and can be used in the expressions.
        See the default value for an example that updates values in the `images section of a kustomization.yaml file.
      type: string
      default: |
        yq eval -i "(.images[] | select(.name == \"edge-model-template-image\").newName) = \"${IMAGE_NAME}\"" $(params.imageReferenceFilePath)
        yq eval -i "(.images[] | select(.name == \"edge-model-template-image\").digest) = \"${IMAGE_DIGEST}\"" $(params.imageReferenceFilePath)
  results:
    - name: target-registry-url
      description: The url of the target registry (e.g. quay.io/rhoai-models/ai-model/)
      value: $(tasks.retrieve-image-info.results.target-registry-url)
    - name: image-sha
      description: The image digest used to tag the image
      value: $(tasks.retrieve-image-info.results.image-sha)
    - name: pr-url
      description: The URL of the pull request
      value: $(tasks.open-pr.results.URL)
  tasks:
    - name: retrieve-image-info
      taskRef:
        kind: Task
        name: retrieve-image-info
      params:
      - name: namespace
        value: $(context.pipelineRun.namespace)
      - name: model-name
        value: $(params.model-name)
    - name: git-clone
      params:
        - name: url
          value: $(params.gitServer)/$(params.gitOrgName)/$(params.gitRepoName)
        - name: gitInitImage
          value: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:1a50511583fc02a27012d17d942e247813404104ddd282d7e26f99765174392c
        - name: subdirectory
          value: /$(params.gitRepoName)/
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: git-workspace
        - name: basic-auth
          workspace: git-basic-auth
    - name: yq-update
      params:
        - name: SCRIPT
          value: $(params.yq-script)
        - name: env-image-name
          value: $(tasks.retrieve-image-info.results.target-registry-url)
        - name: env-image-digest
          value: $(tasks.retrieve-image-info.results.image-sha)
        - name: git-repo-path
          value: $(params.gitRepoName)
      runAfter:
        - retrieve-image-info
        - git-clone
      taskRef:
        kind: Task
        name: yq-update
      workspaces:
        - name: source
          workspace: git-workspace
    - name: git-commit-and-push
      params:
        - name: BASE_IMAGE
          value: cgr.dev/chainguard/git:root-2.39@sha256:7759f87050dd8bacabe61354d75ccd7f864d6b6f8ec42697db7159eccd491139
        - name: GIT_USER_NAME
          value: Pipeline Image Updater
        - name: GIT_USER_EMAIL
          value: pipeline@example.com
        - name: GIT_SCRIPT
          value: |
            # Move repo to HOME so Git does not complain
            # https://stackoverflow.com/a/71941707/19020549
            cp -r $(workspaces.source.path)/$(params.gitRepoName) ~/$(params.gitRepoName)

            cd ~/$(params.gitRepoName)

            PR_BRANCH=pipeline_$(context.pipelineRun.uid)
            git checkout -b $PR_BRANCH

            if [ -z "$(git status --porcelain)" ]; then
                echo "Update did not cause a modification"
                exit 0
            fi

            git commit -am "Update image ref from pipeline"
            git push origin $PR_BRANCH:$PR_BRANCH
        - name: USER_HOME
          value: /home/git
        - name: VERBOSE
          value: "true"
      runAfter:
        - yq-update
      taskRef:
        kind: ClusterTask
        name: git-cli
      workspaces:
        - name: source
          workspace: git-workspace
        - name: basic-auth
          workspace: git-basic-auth
    - name: open-pr
      params:
        - name: GITHUB_HOST_URL
          value: $(params.gitApiServer)
        - name: API_PATH_PREFIX
          value: $(params.gitApiPrefix)
        - name: REPO_FULL_NAME
          value: $(params.gitOrgName)/$(params.gitRepoName)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: $(params.gitTokenSecretName)
        - name: GITHUB_TOKEN_SECRET_KEY
          value: $(params.gitTokenSecretKey)
        - name: AUTH_TYPE
          value: Bearer
        - name: HEAD
          value: pipeline_$(context.pipelineRun.uid)
        - name: BASE
          value: $(params.gitRepoBranchBase)
        - name: BODY
          value: |
            This pull request has been automatically generated by an OpenShift Pipeline in order to update an image ref. Here are the details:

            | Key              | Value                                                                     |
            |------------------|---------------------------------------------------------------------------|
            | Pipeline Name    | $(context.pipeline.name)                                                  |
            | PipelineRun Name | $(context.pipelineRun.name)                                               |
            | PipelinRun UID   | `$(context.pipelineRun.uid)`                                              |
            | File Path        | `$(params.imageReferenceFilePath)`                                        |
            | Image registry   | `$(tasks.retrieve-image-info.results.target-registry-url)`                |
            | New Digest       | `$(tasks.retrieve-image-info.results.image-sha)`                          |
        - name: TITLE
          value: "Auto: update image ref"
      runAfter:
        - git-commit-and-push
      taskRef:
        kind: Task
        name: github-open-pr
      when:
        - input: $(tasks.git-clone.results.commit)
          operator: notin
          values:
            - $(tasks.git-commit-and-push.results.commit)
  workspaces:
    - name: git-workspace
    - name: git-basic-auth
